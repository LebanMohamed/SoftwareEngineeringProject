
package parts.gui;

import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import parts.gui.prompts.AddStockPartPrompt;
import parts.gui.prompts.EditStockPartPrompt;
import parts.logic.StockParts;
import common.Database;
import javax.swing.JTable;


/**
 *
 * @author: Taiybah Hussain EC15205
 *  * Reference List
 * 1. ManageUsersDialog.java : Used as an example for adding table models to JTables
 * 2. ManageUsersDialog.java : Used setLocationto(null) to centre dialog
 * 3. http://www.programcreek.com/java-api-examples/javax.swing.table.DefaultTableCellRenderer : Used to change JTable Layout
 * 4. http://stackoverflow.com/questions/3879610/how-to-clear-contents-of-a-jtable : Used to clear JTable
 * 5. LoginFrame.java : Used setTitle() to set a title to the dialog
 * 6. http://stackoverflow.com/questions/29123451/setmodal-method-on-a-jdialog: Used to set Modal
 */
public class ManagePartsFrame extends javax.swing.JDialog {

          
    private javax.swing.JMenuItem PartInstalledMenuItem;
    private javax.swing.JMenuItem DeliveryMenuItem;
    private javax.swing.JMenuItem ManagedPartsBookedMenuItem;
    private javax.swing.JMenuItem AddStockPartsMenuItem;
    private javax.swing.JMenuItem EditStockPartsMenuItem;
    private javax.swing.JMenuItem DeleteStockPartsMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable stockPartsTable;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    
    /**
     * Creates new form StockParts
     */
    public ManagePartsFrame() {
        initComponents();
        this.stockPartsTable.setModel(TableModel); //Reference: 1 (See Author comment for reference list)
        setModal(true);     //Reference: 6 
        TableModel.loadParts();
        
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer(); //Reference: 3
        leftRenderer.setHorizontalAlignment(DefaultTableCellRenderer.LEFT);
        stockPartsTable.getColumn("ID").setCellRenderer(leftRenderer);
        stockPartsTable.getColumn("Name").setCellRenderer(leftRenderer);
        stockPartsTable.getColumn("Description").setCellRenderer(leftRenderer);
        stockPartsTable.getColumn("Quantity").setCellRenderer(leftRenderer);
        stockPartsTable.getColumn("Cost /£").setCellRenderer(leftRenderer);
        
        TableColumnModel tcm = stockPartsTable.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(50);
        tcm.getColumn(1).setPreferredWidth(150);
        tcm.getColumn(2).setPreferredWidth(200);
        tcm.getColumn(3).setPreferredWidth(50);
        
    }
    private PartsTableModel TableModel = new PartsTableModel();

    /**
     * This method is called from within the constructor to initialise the form.
     * W               

}ARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        setTitle("Stock Parts");    //Reference: 5 
        jScrollPane2 = new javax.swing.JScrollPane();
        stockPartsTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        DeliveryMenuItem = new javax.swing.JMenuItem();
        PartInstalledMenuItem = new javax.swing.JMenuItem();
        AddStockPartsMenuItem = new javax.swing.JMenuItem();
        EditStockPartsMenuItem = new javax.swing.JMenuItem(); 
        DeleteStockPartsMenuItem = new javax.swing.JMenuItem();
        ManagedPartsBookedMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);


        stockPartsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Description", "Quantity", "Cost /£"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(stockPartsTable);
        if (stockPartsTable.getColumnModel().getColumnCount() > 0) {
            stockPartsTable.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jMenu1.setText("Menu");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        DeliveryMenuItem.setText("Part Deliveries");
        DeliveryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliveryMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(DeliveryMenuItem);

        PartInstalledMenuItem.setText("Parts Installed");
        PartInstalledMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    PartInstalledMenuItemActionPerformed(evt);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
        jMenu1.add(PartInstalledMenuItem);
        
        ManagedPartsBookedMenuItem.setText("Manage Parts booked");
        ManagedPartsBookedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    ManagedPartsBookedMenuItemActionPerformed(evt);
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
            }
        });
        jMenu1.add(ManagedPartsBookedMenuItem);
        jMenu1.add(jSeparator1);
        
        AddStockPartsMenuItem.setText("Add Stock Part");
        AddStockPartsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    AddStockPartsMenuItemActionPerformed(evt);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
        jMenu1.add(AddStockPartsMenuItem);
        
        EditStockPartsMenuItem.setText("Edit Stock Part");
        EditStockPartsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    EditStockPartsMenuItemActionPerformed(evt);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
        jMenu1.add(EditStockPartsMenuItem); //DeleteStockPartsMenuItem
        
        DeleteStockPartsMenuItem.setText("Delete Stock Part");
        DeleteStockPartsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    DeleteStockPartsMenuItemActionPerformed(evt);
               } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
        jMenu1.add(DeleteStockPartsMenuItem);
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE))
                .addContainerGap())
        );
        
        setPreferredSize(new java.awt.Dimension(1072, 500));
        pack();
        setLocationRelativeTo(null); //Reference 2
    }// </editor-fold>                        

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {                                       
      
    }
    
    private void DeleteStockPartsMenuItemActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {                                       
      int row = stockPartsTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select Row", "Delete Stock Part", JOptionPane.ERROR_MESSAGE);
        }
        else{
            java.util.List<Integer> ids = Database.getInstance().getPartIDs();
            int partID = ids.get(0);
            partID = partID + row;
            if(Database.getInstance().checkUsedStockPart(partID)==false)
            {
                Database.getInstance().deleteStockPart(partID);
                clearTable(stockPartsTable);
                TableModel.loadParts();
            }
            else{
                JOptionPane.showMessageDialog(this,"ERROR: Stock part used in use, Unable to delete");
            }
        }
    } 

    private void DeliveryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
       PartDelivery pd = new PartDelivery();
       pd.setVisible(true);
       clearTable(stockPartsTable);
        TableModel.loadParts();
    }  
    
    private void ManagedPartsBookedMenuItemActionPerformed(java.awt.event.ActionEvent evt) throws ParseException {
       ManageBookedParts pb = new ManageBookedParts();
       pb.setVisible(true);
       clearTable(stockPartsTable);
        TableModel.loadParts();
    } 

    private void PartInstalledMenuItemActionPerformed(java.awt.event.ActionEvent evt) throws SQLException { 
       ManageInstallParts pi = null;
        try {
            pi = new ManageInstallParts();
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this,"ERROR: Getting PartsInstalled");
        }
       pi.setVisible(true);
       clearTable(stockPartsTable);
        TableModel.loadParts();
    }
    
    private void AddStockPartsMenuItemActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {  
        AddStockPartPrompt ap = new AddStockPartPrompt();
        ap.show();
        if (ap.isSuccessfull()){
            StockParts sp;
            sp = ap.parseAddStockParts();
            try{
                Database.getInstance().addStockPart(sp);
            }
            catch(SQLException e)
            {
               JOptionPane.showMessageDialog(this,"Database Error with adding stock part"); 
            } 
            clearTable(stockPartsTable);
            TableModel.loadParts();
        }
    }
    
    private void EditStockPartsMenuItemActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {  
        int row = stockPartsTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select Row", "Edit Stock Part", JOptionPane.ERROR_MESSAGE);
        }
        else{
            java.util.List<Integer> ids = Database.getInstance().getPartIDs();
            int partID = ids.get(0);
            partID = partID + row;
            StockParts stp = Database.getInstance().getStockPartForId(partID);
            EditStockPartPrompt ed = new EditStockPartPrompt(stp);
            ed.show();
            if (ed.isSuccessfull()){
                StockParts sp;
                sp = ed.parseEditStockParts();
                try{
                    Database.getInstance().editStockParts(sp, partID);
                }
                catch(SQLException e)
                {
                   JOptionPane.showMessageDialog(this,"Database Error with adding stock part"); 
                } 
                clearTable(stockPartsTable);
                TableModel.loadParts();
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagePartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagePartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagePartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagePartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagePartsFrame().setVisible(true);
            }
        });
    }
    
    public void clearTable(JTable TableName){ //Reference 4
        DefaultTableModel model;
        model = (DefaultTableModel)TableName.getModel();

    while (model.getRowCount() > 0){
        for (int i = 0; i < model.getRowCount(); ++i){
            model.removeRow(i);
        }
    }              
    }
}
