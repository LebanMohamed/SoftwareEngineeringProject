package common.gui;

import common.Database;
import common.gui.util.SwingUtils;
import common.gui.util.TableHelper;
import common.logic.User;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.sql.SQLException;

/**
 * The frame responsible for managing system user accounts, this includes the addition, deletion and modification
 * of such users. This frame does no privilege checking regarding the logged in user, this should be done elsewhere.
 */
public final class ManageUsersDialog extends javax.swing.JDialog implements TableModelListener {

    private ManageUsersTableModel model;
    private User loggedInUser;
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JScrollPane usersTableScrollPane;
    private javax.swing.JTable usersTable;

    ManageUsersDialog(User loggedInUser) {
        this.loggedInUser = loggedInUser;
        model = new ManageUsersTableModel(loggedInUser);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addUserButton = new javax.swing.JButton();
        removeUserButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        usersTableScrollPane = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();

        setTitle("GMSIS / Manage Users");
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(450, 320));
        setModal(true);

        addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                int height = getHeight();
                int width = getWidth();

                // Resizing the users table vertically
                final int tableOffsetY = 80;
                usersTableScrollPane.setSize(width, height - tableOffsetY);
                usersTable.setSize(width, height - tableOffsetY);

                // Moving the buttons
                final int finalizeButtonsOffsetY = 70;
                addUserButton.setLocation(addUserButton.getLocation().x, height - finalizeButtonsOffsetY);
                removeUserButton.setLocation(removeUserButton.getLocation().x, height - finalizeButtonsOffsetY);
                doneButton.setLocation(doneButton.getLocation().x, height - finalizeButtonsOffsetY);
            }
        });

        addUserButton.setText("Add");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        removeUserButton.setText("Remove");
        removeUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserActionPerformed(evt);
            }
        });

        usersTable.setModel(model); // set the table model
        usersTable.putClientProperty("terminateEditOnFocusLost", true);
        usersTable.setAutoCreateRowSorter(true);
        usersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        usersTableScrollPane.setViewportView(usersTable);
        model.loadUsers(); // Load the initial users before we add the table listener, so that they don't count as 'edits'
        model.addTableModelListener(this);

        // Set render alignment for numeric columns
        TableHelper.leftAlignColumnValues(usersTable, 0);

        // Set col width
        TableHelper.setColumnPrefWidth(usersTable, 0, 10);
        TableHelper.setColumnPrefWidth(usersTable, 4, 70);

        // Form layout
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(usersTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(addUserButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeUserButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(doneButton)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(usersTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(addUserButton)
                                        .addComponent(removeUserButton)
                                        .addComponent(doneButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
        setLocationRelativeTo(null); // makes this frame start in the centre of the screen
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed(ActionEvent evt) {
        setVisible(false);
    }

    private void removeUserActionPerformed(ActionEvent evt) {
        // Get selected row in table
        int rowNo = usersTable.getSelectedRow();

        if (rowNo == -1) {
            JOptionPane.showMessageDialog(this, "No row was selected.", "Delete User - Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        rowNo = usersTable.convertRowIndexToModel(rowNo); // Source: https://stackoverflow.com/a/2075482
        
        int userId = (int) usersTable.getModel().getValueAt(rowNo, 0);

        if (userId == loggedInUser.getId()) {
            JOptionPane.showMessageDialog(null, "You cannot delete your own user.", "Delete User - Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ask to confirm action
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the user with id: '" + userId + "'",
                "Delete User", JOptionPane.YES_NO_OPTION)
                != JOptionPane.YES_OPTION)
            return;

        try {
            // Deleting user from the database and table
            Database.getInstance().removeUser(userId);
            model.removeRowByUserId(userId);
        } catch (SQLException ex) {
            SwingUtils.showDatabaseErrorDialog("Delete User", ex);
        }
    }

    private void addUserButtonActionPerformed(ActionEvent evt) {
        // Get user details
        AddUserPrompt prompt = new AddUserPrompt();
        prompt.show();

        // Check if successful, if so, add the new user
        if (prompt.isSuccessful()) {
            User user = prompt.parseUser();

            try {
                // Add user to database and table
                Database.getInstance().addUser(user);
                model.addRow(user);
            } catch (SQLException ex) {
                SwingUtils.showDatabaseErrorDialog("Add User", ex);
            }
        }
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        // Ignore addition and deletion changes, since we handle them elsewhere
        if (e.getType() == TableModelEvent.DELETE || e.getType() == TableModelEvent.INSERT)
            return;

        try {
            // Get row that changed
            int rowNo = e.getFirstRow();
            rowNo = usersTable.convertRowIndexToModel(rowNo); // Source: https://stackoverflow.com/a/2075482
            User user = model.rowToUser(rowNo);

            // Update in database
            try {
                Database.getInstance().editUser(user);

                // Check if it was the logged in user
                if (user.getId() == loggedInUser.getId()) {
                    loggedInUser = user;

                    if (!user.isAdmin()) {
                        JOptionPane.showMessageDialog(this,
                                "You unset yourself as an admin and thus lost access to this table.", "Edit User",
                                JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    }
                }
            } catch (SQLException ex) {
                SwingUtils.showDatabaseErrorDialog("Edit User", ex);
            }
        } catch (ArrayIndexOutOfBoundsException ignored) {
        }
    }

    User getLoggedInUser() {
        return loggedInUser;
    }
}