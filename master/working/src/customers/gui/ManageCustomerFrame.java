package customers.gui;

import common.Database;
import common.gui.util.TableHelper;
import customers.gui.Lists.ListOfFutureBookingsPrompt;
import customers.gui.Lists.ListOfPartsPrompt;
import customers.gui.Lists.ListOfPastBookingsPrompt;
import customers.gui.Lists.ListOfVehiclesPrompt;
import customers.gui.Search.SearchBookingByName;
import customers.gui.Search.SearchCustomerPrompt;
import customers.gui.Search.SearchVehicleByID;
import customers.logic.Customer;
import customers.logic.Filter;
import diagrep.gui.AddBookingPrompt;
import java.awt.Dimension;
import vehicles.logic.Vehicle;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author cawaala
 */
public class ManageCustomerFrame extends javax.swing.JDialog {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageCustomerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageCustomerFrame().setVisible(true);
            }
        });
    }

    private final ManageCustomerTableModel model = new ManageCustomerTableModel();
    private javax.swing.JTable Customer_Table;
    private javax.swing.JButton btn_Add;
    private javax.swing.JButton btn_Edit;
    private javax.swing.JButton btn_Done;
    private javax.swing.JButton btn_Remove;
    private javax.swing.JButton btn_Search;
    private javax.swing.JButton btn_RestSearch;
    private javax.swing.JScrollPane jScrollPane1;
     private javax.swing.JMenu help;
    private javax.swing.JMenu fileMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem VehicleList;
    private javax.swing.JMenuItem BookingList;
    private javax.swing.JMenuItem Bookings;
    private javax.swing.JMenuItem Vehicle;
    private javax.swing.JMenuItem Bills;
    private javax.swing.JMenuItem Parts;
    private javax.swing.JMenuItem InitiateBooking;
    private javax.swing.JMenuItem FutureBookingList;

    /**
     * Creates new form ManageCustomerFrame
     */
    public ManageCustomerFrame() {
        initComponents();
        model.setEditable(false);
        setModal(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        btn_Add = new javax.swing.JButton();
        btn_Remove = new javax.swing.JButton();
        btn_Done = new javax.swing.JButton();
        btn_Search = new javax.swing.JButton();
        btn_RestSearch = new javax.swing.JButton();
        btn_Edit = new javax.swing.JButton();
        fileMenuItem = new javax.swing.JMenu();
        help = new javax.swing.JMenu();
        menuBar = new javax.swing.JMenuBar();
        VehicleList = new javax.swing.JMenuItem();
        BookingList = new javax.swing.JMenuItem();
        Bookings = new javax.swing.JMenuItem();
        Vehicle = new javax.swing.JMenuItem();
        Bills = new javax.swing.JMenuItem();
        Parts = new javax.swing.JMenuItem();
        InitiateBooking = new javax.swing.JMenuItem();
        FutureBookingList = new javax.swing.JMenuItem();
        Customer_Table = new javax.swing.JTable();

        setTitle("GMSIS / Manage Customers");
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        setPreferredSize(new Dimension(1072, 500));
        setMinimumSize(new java.awt.Dimension(1072, 500));
        
        addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                int height = getHeight();
                int width = getWidth();

                // Resizing the users table vertically
                final int tableOffsetY = 100;
                jScrollPane1.setSize(width, height - tableOffsetY);
                Customer_Table.setSize(width, height - tableOffsetY);

                // Moving the buttons
                final int finalizeButtonsOffsetY = 90;
                btn_Add.setLocation(btn_Add.getLocation().x, height - finalizeButtonsOffsetY);
                btn_Remove.setLocation(btn_Remove.getLocation().x, height - finalizeButtonsOffsetY);
                btn_Search.setLocation(btn_Search.getLocation().x, height - finalizeButtonsOffsetY);
                btn_RestSearch.setLocation(btn_RestSearch.getLocation().x, height - finalizeButtonsOffsetY);
                btn_Edit.setLocation(btn_Edit.getLocation().x, height - finalizeButtonsOffsetY);
                btn_Done.setLocation(btn_Done.getLocation().x, height - finalizeButtonsOffsetY);

            }
        });

        btn_RestSearch.setText("Reset Search");
        btn_RestSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RestSearchActionPerformed(evt);
            }
        });

        btn_Add.setText("Add Customer");
        btn_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddActionPerformed(evt);
            }
        });

        btn_Edit.setText("Edit Customer");
        btn_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EditActionPerformed(evt);
            }
        });

        btn_Remove.setText("Remove Customer");
        btn_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveActionPerformed(evt);
            }
        });

        btn_Done.setText("Done");
        btn_Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DoneActionPerformed(evt);
            }
        });

        btn_Search.setText("Search Customer");
        btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btn_SearchActionPerformed(evt);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        fileMenuItem.setText("Menu");
        help.setText("Help");
               help.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JOptionPane.showMessageDialog(null, "The window that opens allows you to add, edit, remove and search customers. \n" +
"The reset search button is used to refresh the table model to get all customers up again once searched.\n"
                        + "The done button closes the customer account window, showing the overview window. \n" +
"\n" +
"The menu allows you to access a list of future and past bookings, parts used, vehicles and invoice. \n"
                        + "You can also search for a booking by customer name and search for vehicle by customer id. \n"
                        + "You can start a booking by ‘initiating booking’.");
            }
        });
              help.add(help);
        
        VehicleList.setText("Vehicle");
        VehicleList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    VehicleListMenuItemActionPerformed(evt);
                } catch (ParseException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        fileMenuItem.add(VehicleList);

        Bills.setText("Invoice");
        Bills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    BillsMenuItemActionPerformed(evt);
                } catch (ParseException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        fileMenuItem.add(Bills);

        Parts.setText("Part");
        Parts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    PartsMenuItemActionPerformed(evt);
                } catch (ParseException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        fileMenuItem.add(Parts);
        fileMenuItem.add(new JPopupMenu.Separator());
        FutureBookingList.setText("Future Booking Dates");
        FutureBookingList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    FutureBookingListMenuItemActionPerformed(evt);
                } catch (ParseException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });

        fileMenuItem.add(FutureBookingList);

        BookingList.setText("Past Booking Dates");
        BookingList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    BookingListMenuItemActionPerformed(evt);
                } catch (ParseException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageCustomerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });

        fileMenuItem.add(BookingList);

        fileMenuItem.add(new JPopupMenu.Separator());
        Bookings.setText("Search Booking");
        Bookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BookingsMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(Bookings);
 
        Vehicle.setText("Search Vehicle");
        Vehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                VehicleMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(Vehicle);

        fileMenuItem.add(new JPopupMenu.Separator());

        InitiateBooking.setText("Initiate Booking");
        InitiateBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                InitiateBookingMenuItemActionPerformed(evt);
            }
        });
        fileMenuItem.add(InitiateBooking);
        
        menuBar.add(fileMenuItem);
        menuBar.add(help);
        setJMenuBar(menuBar);

        Customer_Table.setModel(model);
        Customer_Table.setAutoCreateRowSorter(true);
        Customer_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(Customer_Table);
        model.loadInitialCustomerList();

        // Set render alignment for numeric columns
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.LEFT);
        Customer_Table.getColumnModel().getColumn(0).setCellRenderer(renderer);

        TableHelper.setColumnPrefWidth(Customer_Table, 0, 1);
        TableHelper.setColumnPrefWidth(Customer_Table, 1, 10);
        TableHelper.setColumnPrefWidth(Customer_Table, 2, 10);
        TableHelper.setColumnPrefWidth(Customer_Table, 3, 40);
        TableHelper.setColumnPrefWidth(Customer_Table, 4, 10);
        TableHelper.setColumnPrefWidth(Customer_Table, 5, 10);
        TableHelper.setColumnPrefWidth(Customer_Table, 6, 10);
        TableHelper.setColumnPrefWidth(Customer_Table, 7, 10);
        // Form layout
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btn_Add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Edit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Remove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_RestSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_Done)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btn_Add)
                                        .addComponent(btn_Edit)
                                        .addComponent(btn_Remove)
                                        .addComponent(btn_Search)
                                        .addComponent(btn_RestSearch)
                                        .addComponent(btn_Done))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
        setLocationRelativeTo(null);
    }

    private void btn_AddActionPerformed(ActionEvent evt) {
        AddCustomerPrompt addCustomerPrompt = new AddCustomerPrompt();
        addCustomerPrompt.show();

        // Check if successful, if so, add the new customer
        if (addCustomerPrompt.isSuccessful()) {
            Customer customer = addCustomerPrompt.parseCustomer();

            try {
                // Add customer to database and table
                Database.getInstance().addCustomer(customer);
                model.addRow(customer);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error adding customer to the database.\r\n"
                        + "Error Message: " + e.getMessage(), "Add customer // Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btn_SearchActionPerformed(ActionEvent evt) throws SQLException {
        SearchCustomerPrompt searchCustomerPrompt = new SearchCustomerPrompt();
        searchCustomerPrompt.show();
        Collection<Vehicle> x;
        if (searchCustomerPrompt.isSuccessful()) {
            Filter filter = searchCustomerPrompt.getFilter();
            model.clearRows(); // clear rows so we can add new elements

            switch (filter.getFilName()) {
                case "FullName": // full name search, standard stuff
                    Collection<Customer> customers = Database.getInstance().getCustomersWithFullName(filter.getFilValue());

                    for (Customer c : customers) {
                        model.addRow(c);
                    }
                    break;
                case "FirstName": // first name search, so we have some wild card stuff going on
                    customers = Database.getInstance().getCustomersWithFirstLastName(filter.getFilValue() + " %");

                    for (Customer c : customers) {
                        model.addRow(c);
                    }
                    break;
                case "SurName": // first name search, so we have some wild card stuff going on
                    customers = Database.getInstance().getCustomersWithFirstLastName("% " + filter.getFilValue());

                    for (Customer c : customers) {
                        model.addRow(c);
                    }
                    break;
                case "Vehicle": // first name search, so we have some wild card stuff going on
                    customers = Database.getInstance().getCustomersByVehicleReg(filter.getFilValue());

                    for (Customer c : customers) {
                        model.addRow(c);
                    }
                    break;
            }
        }
    }

    private void btn_RemoveActionPerformed(ActionEvent evt) {
        // Get selected row in table
        int rowNo = Customer_Table.getSelectedRow();

        if (rowNo == -1) {
            JOptionPane.showMessageDialog(this, "No row was selected.", "Delete Customer", JOptionPane.ERROR_MESSAGE);
            return;
        }

        rowNo = Customer_Table.convertRowIndexToModel(rowNo);

        int customerId = (int) Customer_Table.getModel().getValueAt(rowNo, 0);

        Customer cus = model.rowToCustomer(rowNo);
        // Ask to confirm action
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the customer with id: '" + customerId + "'",
                "Confirm deletion of customer", JOptionPane.YES_NO_OPTION)
                != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // Deleting customer from the database and table
            Database.getInstance().removeCustomer(cus);
            model.removeRowByCustomerId(customerId);

            JOptionPane.showMessageDialog(this, "Successfully deleted customer from the database.", "Delete Customer",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error deleting customer from the database.\r\n"
                    + "Error Message: " + e.getMessage(), "Delete Customer // Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btn_EditActionPerformed(ActionEvent evt) {

        int rowNo = Customer_Table.getSelectedRow();

        if (rowNo == -1) {
            JOptionPane.showMessageDialog(this, "No row was selected.", "Edit Customer", JOptionPane.ERROR_MESSAGE);
            return;
        }

        rowNo = Customer_Table.convertRowIndexToModel(rowNo);
        int cusId = (int) Customer_Table.getModel().getValueAt(rowNo, 0);

        EditCustomerPrompt editCustomerPrompt = new EditCustomerPrompt(cusId);
        editCustomerPrompt.show();

        if (editCustomerPrompt.isSuccessful()) {
            Customer cus = editCustomerPrompt.parseCustomer();

            try {
                Database.getInstance().editCustomer(cus);
                model.removeRow(rowNo);
                model.addRow(cus);

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error adding Customer to the database.\r\n"
                        + "Error Message: " + e.getMessage(), "Add Customer // Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void btn_RestSearchActionPerformed(ActionEvent evt) {
        model.clearRows();
        model.loadInitialCustomerList();
    }

    private void btn_DoneActionPerformed(ActionEvent evt) {
        setVisible(false);
    }
    //prompts and other

    private void VehicleMenuItemActionPerformed(ActionEvent evt) {
        SearchVehicleByID c = new SearchVehicleByID();
        c.show();

    }

    private void BookingsMenuItemActionPerformed(ActionEvent evt) {
        SearchBookingByName CustomerBooking = new SearchBookingByName();
        CustomerBooking.show();
    }

    private void InitiateBookingMenuItemActionPerformed(ActionEvent evt) {
        AddBookingPrompt abp = new AddBookingPrompt();
        abp.show();
    }

    private void PartsMenuItemActionPerformed(ActionEvent evt) throws ParseException, SQLException {
        ListOfPartsPrompt v = new ListOfPartsPrompt();
        v.show();
    }

    private void BillsMenuItemActionPerformed(ActionEvent evt) throws ParseException, SQLException {
        InvoicePrompt v = new InvoicePrompt();
        v.show();
    }

    private void VehicleListMenuItemActionPerformed(ActionEvent evt) throws ParseException, SQLException {
        ListOfVehiclesPrompt v = new ListOfVehiclesPrompt();
        v.show();
    }

    private void BookingListMenuItemActionPerformed(ActionEvent evt) throws ParseException, SQLException {
        ListOfPastBookingsPrompt v = new ListOfPastBookingsPrompt();
        v.show();
    }

    private void FutureBookingListMenuItemActionPerformed(ActionEvent evt) throws ParseException, SQLException {
        ListOfFutureBookingsPrompt v = new ListOfFutureBookingsPrompt();
        v.show();
    }
}
