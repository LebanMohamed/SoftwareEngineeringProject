package diagrep.gui.mechanic;

import common.Database;
import common.gui.util.SwingUtils;
import common.gui.util.TableHelper;
import common.gui.util.TextFieldHelper;
import diagrep.logic.Mechanic;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.sql.SQLException;

/**
 * A frame for the managing of {@link Mechanic} in the system.
 */
public final class ManageMechanicsFrame extends javax.swing.JDialog implements TableModelListener {

    private final ManageMechanicsTableModel model = new ManageMechanicsTableModel();
    private javax.swing.JButton doneButton;
    private javax.swing.JButton addMechanicButton;
    private javax.swing.JButton removeMechanicButton;
    private javax.swing.JScrollPane mechanicsTableScrollPane;
    private javax.swing.JTable mechanicsTable;

    public ManageMechanicsFrame() {
        initComponents();
        setModal(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addMechanicButton = new javax.swing.JButton();
        removeMechanicButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        mechanicsTableScrollPane = new javax.swing.JScrollPane();
        mechanicsTable = new javax.swing.JTable();

        setTitle("GMSIS / Manage Mechanics");
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(350, 320));

        addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                int height = getHeight();
                int width = getWidth();

                // Resizing the users table vertically
                final int tableOffsetY = 80;
                mechanicsTableScrollPane.setSize(width, height - tableOffsetY);
                mechanicsTable.setSize(width, height - tableOffsetY);

                // Moving the buttons
                final int finalizeButtonsOffsetY = 70;
                addMechanicButton.setLocation(addMechanicButton.getLocation().x, height - finalizeButtonsOffsetY);
                removeMechanicButton.setLocation(removeMechanicButton.getLocation().x, height - finalizeButtonsOffsetY);
                doneButton.setLocation(doneButton.getLocation().x, height - finalizeButtonsOffsetY);
            }
        });

        addMechanicButton.setText("Add");
        addMechanicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMechanicButtonActionPerformed();
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed();
            }
        });

        removeMechanicButton.setText("Remove");
        removeMechanicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMechanicActionPerformed();
            }
        });

        mechanicsTable.setModel(model); // set the table model
        mechanicsTable.putClientProperty("terminateEditOnFocusLost", true);
        mechanicsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        model.loadMechanics(); // Load the initial users before we add the table listener, so that they don't count as 'edits'
        model.addTableModelListener(this);
        mechanicsTableScrollPane.setViewportView(mechanicsTable);

        // Set render alignment for numeric columns
        TableHelper.leftAlignColumnValues(mechanicsTable, 0);
        TableHelper.leftAlignColumnValues(mechanicsTable, 3);
        TableHelper.leftAlignEditingColumnValues(mechanicsTable, 3);

        // Disable non-numeric input in hourly wage editor
        CellEditor editor = mechanicsTable.getColumnModel().getColumn(3).getCellEditor();
        TextFieldHelper.disallowNonNumericInput((JTextField) (((DefaultCellEditor) editor)).getComponent());

        // Set column widths
        TableHelper.setColumnPrefWidth(mechanicsTable, 0, 6);

        // Form layout
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mechanicsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(addMechanicButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeMechanicButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(doneButton)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(mechanicsTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(addMechanicButton)
                                        .addComponent(removeMechanicButton)
                                        .addComponent(doneButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed() {
        dispose();
    }

    private void removeMechanicActionPerformed() {
        // Get selected row in table
        int rowNo = mechanicsTable.getSelectedRow();
        rowNo = mechanicsTable.convertRowIndexToModel(rowNo);

        if (rowNo == -1) {
            JOptionPane.showMessageDialog(this, "No row was selected.", "Delete Mechanic", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int mechId = (int) mechanicsTable.getModel().getValueAt(rowNo, 0);

        // Ask to confirm action
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the mechanic with id: " + mechId + "?",
                "Delete Mechanic", JOptionPane.YES_NO_OPTION)
                != JOptionPane.YES_OPTION)
            return;

        // Check if assigned to any bookings, if so reject
        try {
            if (Database.getInstance().mechanicIsNeeded(mechId)) {
                JOptionPane.showMessageDialog(null, "You cannot delete a mechanic who is assigned to some bookings,"
                                + " as this will change if each is invoice settled or not.\r\n"
                                + "Please un-assign this mechanic from bookings he/she is assigned to, before trying again.",
                        "Delete Mechanic - Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException ex) {
            SwingUtils.showDatabaseErrorDialog("Delete Mechanic", ex);
            return;
        }

        try {
            // Deleting user from the database and table
            Database.getInstance().removeMechanic(mechId);
            model.removeRowByMechanicId(mechId);

            JOptionPane.showMessageDialog(this, "Successfully deleted mechanic from the database.", "Delete Mechanic",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            SwingUtils.showDatabaseErrorDialog("Delete Mechanic", ex);
        }
    }

    private void addMechanicButtonActionPerformed() {
        // Get user details
        AddMechanicPrompt prompt = new AddMechanicPrompt();
        prompt.show();

        // Check if successful, if so, add the new user
        if (prompt.isSuccessful()) {
            Mechanic mechanic = prompt.parseMechanic();

            try {
                // Add user to database and table
                Database.getInstance().addMechanic(mechanic);
                model.addRow(mechanic);
            } catch (SQLException ex) {
                SwingUtils.showDatabaseErrorDialog("Add Mechanic", ex);
            }
        }
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        // Ignore addition and deletion changes, since we handle them elsewhere
        if (e.getType() == TableModelEvent.DELETE || e.getType() == TableModelEvent.INSERT)
            return;

        try {
            // Get row that changed
            int rowNo = e.getFirstRow();
            Mechanic mechanic = model.rowToMechanic(rowNo);

            // Update in database
            try {
                Database.getInstance().editMechanic(mechanic);
                JOptionPane.showMessageDialog(this, "Successfully edited mechanic in the database.",
                        "GMSIS / Edit Mechanic", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                SwingUtils.showDatabaseErrorDialog("Edit Mechanic", ex);
            }
        } catch (ArrayIndexOutOfBoundsException ignored) {
        }
    }
}