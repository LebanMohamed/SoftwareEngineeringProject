package diagrep.gui;

import common.Database;
import diagrep.logic.Booking;
import diagrep.logic.ScheduledMaintenanceBooking;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Statistics for all bookings.
 */
final class ChartsFrame extends javax.swing.JDialog {

    private List<Booking> bookings;
    private boolean errorOccurred;

    ChartsFrame() {
        try {
            bookings = Database.getInstance().getAllBookings();
        } catch (SQLException | ParseException ex) {
            JOptionPane.showMessageDialog(null, "Unable to load bookings to create charts from.", "Charts - Error",
                    JOptionPane.ERROR_MESSAGE);
            errorOccurred = true;
            return;
        }
        initComponents();
        setModal(true);
    }

    private static JPanel createChart(String title, DefaultPieDataset dataset) {
        JFreeChart chart = ChartFactory.createPieChart(title, dataset, true, true, false);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(1, 1));
        panel.add(new ChartPanel(chart));
        return panel;
    }

    private static void count(String element, HashMap<String, Integer> map) {
        if (map.containsKey(element)) {
            map.put(element, map.get(element) + 1);
        } else {
            map.put(element, 1);
        }
    }

    private static DefaultPieDataset datasetFromHashMap(HashMap<String, Integer> map) {
        DefaultPieDataset data = new DefaultPieDataset();

        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            data.setValue(entry.getKey(), entry.getValue());
        }
        return data;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        javax.swing.JLabel infoLabel = new javax.swing.JLabel();
        infoLabel.setText("A collection of graphs, showing data from existing bookings.");
        javax.swing.JTabbedPane tabbedPane = new javax.swing.JTabbedPane();
        javax.swing.JButton doneButton = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Charts");
        setResizable(false);

        tabbedPane.addTab("Booking Types", createChart("Booking Types", bookingTypesData()));
        tabbedPane.addTab("Vehicle Makes", createChart("Vehicle Makes", vehicleMakesData()));
        tabbedPane.addTab("Customers", createChart("Customers", customersData()));
        tabbedPane.addTab("Mechanics", createChart("Mechanics", mechanicsData()));

        doneButton.setText("Done");
        doneButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tabbedPane)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(infoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(doneButton)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(tabbedPane)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(doneButton)
                                        .addComponent(infoLabel))
                                .addContainerGap())
        );
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>

    private DefaultPieDataset mechanicsData() {
        // Count makes
        HashMap<String, Integer> map = new HashMap<>();

        for (Booking booking : bookings) {
            String mechanic = booking.getMechanic().getFullName();
            count(mechanic, map);
        }

        // Convert to pie data set
        return datasetFromHashMap(map);
    }

    private DefaultPieDataset bookingTypesData() {
        // Count makes
        HashMap<String, Integer> map = new HashMap<>();

        for (Booking booking : bookings) {
            String type = booking instanceof ScheduledMaintenanceBooking ? "Scheduled Maintenance" : "Diagnosis & Repair";
            count(type, map);
        }

        // Convert to pie data set
        return datasetFromHashMap(map);
    }

    private DefaultPieDataset vehicleMakesData() {
        // Count makes
        HashMap<String, Integer> map = new HashMap<>();

        for (Booking booking : bookings) {
            String vehicleMake = booking.getVehicle().getTemplate().getMake();
            count(vehicleMake, map);
        }

        // Convert to pie data set
        return datasetFromHashMap(map);
    }

    private DefaultPieDataset customersData() {
        // Count customers
        HashMap<String, Integer> map = new HashMap<>();

        for (Booking booking : bookings) {
            String fullName = booking.getCustomer().getFullName();
            count(fullName, map);
        }

        // Convert to pie data set
        return datasetFromHashMap(map);
    }

    boolean isErrorOccurred() {
        return errorOccurred;
    }
}
