/**
 * Author ec15143 Nikita Miroyubov
 */
package specialist.gui;

import common.Database;
import common.gui.util.TableHelper;
import common.logic.Invoice;
import diagrep.logic.Booking;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import specialist.gui.TableModels.SPCBookingTableModel;
import specialist.logic.SPCBooking;

public class ManageSPCBookingsDialog extends JDialog {

    private JMenu dataMenu;
    private JButton currentBookingsButton;
    private JMenuItem deleteBookingMenu;
    private JMenuItem addBookingMenuItem;
    private JMenu helpMenu;
    private JMenuBar menuBar;
    private JMenuItem listOfSPCsMenuItem;
    private JTable spcBookingTable;
    private JScrollPane spcBookingsScrollPane;
    private JMenuItem spcPerVehicleMenuItem;
    private JMenuItem summaryMenuItem;
    private JTextField searchBox;
    private JButton searchButton;
    private JButton showBookingsButton;
    private JButton showFutureBookingsButton;
    private JButton showPastBookingsButton;
    private JMenuItem returnedItemsMenuItem;
    private final SPCBookingTableModel spcBookingTableModel = new SPCBookingTableModel();
    private int selectedRowIdx;

    public ManageSPCBookingsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        //setResizable(false);

        this.setTitle("GMSIS SPC booking / Manage SPC Bookings");
        this.setPreferredSize(new Dimension(1072, 500));
        spcBookingsScrollPane = new JScrollPane();
        spcBookingTable = new JTable();
        menuBar = new JMenuBar();
        dataMenu = new JMenu();
        showFutureBookingsButton = new JButton();
        showPastBookingsButton = new JButton();
        deleteBookingMenu = new JMenuItem();
        spcPerVehicleMenuItem = new JMenuItem();
        summaryMenuItem = new JMenuItem();
        returnedItemsMenuItem = new JMenuItem();
        helpMenu = new JMenu();
        listOfSPCsMenuItem = new JMenuItem();
        addBookingMenuItem = new JMenuItem();
        searchBox = new JTextField();
        searchButton = new JButton();
        showBookingsButton = new JButton();
        currentBookingsButton = new JButton();
 
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        spcBookingTable.setModel(spcBookingTableModel);
        
        TableHelper.leftAlignColumnValues(spcBookingTable, 0);
        TableHelper.setColumnPrefWidth(spcBookingTable, 0, 6);
        TableHelper.setColumnPrefWidth(spcBookingTable, 2, 50);
        TableHelper.setColumnPrefWidth(spcBookingTable, 3, 40);
        TableHelper.setColumnPrefWidth(spcBookingTable, 4, 20);
        TableHelper.setColumnPrefWidth(spcBookingTable, 5, 20);
        TableHelper.setColumnPrefWidth(spcBookingTable, 6, 40);
        TableHelper.setColumnPrefWidth(spcBookingTable, 7, 40);
        TableHelper.setColumnPrefWidth(spcBookingTable, 8, 25);
        helpMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JOptionPane.showMessageDialog(null, "   The window allows you to add/delete SPC bookings, view summary of outstanding items, view centres used on a vehicle, view vehicles at SPC. \nTo view vehicles at a Specialist Repairs Centre, you should click on Menu ->  Show list of repair centres. \nThis would open a new window that allows you to choose a centre.\nAfter the centre is chosen, click on the button to view vehicles sent to the selected centre.\n" +
"   To add/delete/edit parts, you must click Menu->View centres used on a vehicle. You must then select a vehicle, the list of SPCs used should appear automatically.\nBy selecting an SPC centre from this list and clicking on ‘Show parts’ a new window will appear with the list of parts. \nIf this list is empty, that means the selected SPC has vehicle only. \nTo add/edit/delete parts you must click on a corresponding button. \nYou can not edit parts if the booking end date has passed.\nYou can not add a part if there is currently no ongoing booking. \n" +
"   Where the search box is available, type in vehicle registration number and press ‘Search’ if you want to see specific information only.");
            }
        });
        
        spcBookingTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        try {
            spcBookingTableModel.loadSPCBookings();
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        spcBookingsScrollPane.setViewportView(spcBookingTable);
        spcBookingsScrollPane.setPreferredSize(new Dimension(1200, 500));

        dataMenu.setText("Menu");
        

        addBookingMenuItem.setText("Add Booking");
        addBookingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookingMenuItemActionPerformed(evt);
            }
        });
        dataMenu.add(addBookingMenuItem);

        deleteBookingMenu.setText("Delete booking");
        deleteBookingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookingMenuActionPerformed(evt);
            }
        });

        dataMenu.add(deleteBookingMenu);
        dataMenu.add(new JPopupMenu.Separator());

        
        spcPerVehicleMenuItem.setText("View centres used on a vehicle");
        spcPerVehicleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spcPerVehicleMenuItemActionPerformed(evt);
            }
        });
        dataMenu.add(spcPerVehicleMenuItem);

        summaryMenuItem.setText("Summary of outstanding vehicles and parts");
        summaryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryMenuItemActionPerformed(evt);
            }

        });
        returnedItemsMenuItem.setText("Summary of returned vehicles and parts");
        returnedItemsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnedMenuItemActionPerformed(evt);
            }

        });
        dataMenu.add(listOfSPCsMenuItem);
        dataMenu.add(new JPopupMenu.Separator());
        listOfSPCsMenuItem.setText("Vehicles at repair centres");
        listOfSPCsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listOfSPCsMenuItemActionPerformed(evt);
            }

        });
        dataMenu.add(summaryMenuItem);
        dataMenu.add( returnedItemsMenuItem);
        

        menuBar.add(dataMenu);

        helpMenu.setText("Help");
        menuBar.add(helpMenu);
        searchButton.setText("Search");
        searchBox.setText("reg.num/cust.name");
        searchBox.setForeground(Color.GRAY);
        searchBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBoxMouseClicked(evt);
            }
        });

        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSPCButtonActionPerformed(evt);
            }
        });
        showFutureBookingsButton.setText("Show future bookings");
        showFutureBookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                futureBookingsButtonActionPerformed(evt);
            }
        });
        showPastBookingsButton.setText("Show past bookings");
        showPastBookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastBookingsButtonActionPerformed(evt);
            }
        });
        showBookingsButton.setText("Show all bookings");
        showBookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBookingsButtonActionPerformed(evt);
            }
        });
        currentBookingsButton.setText("Show current bookings");
        currentBookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentBookingsButtonActionPerformed(evt);
            }
        });
        setJMenuBar(menuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(spcBookingsScrollPane, GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(showBookingsButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(currentBookingsButton)
                                .addGap(18, 18, 18)
                                .addComponent(showFutureBookingsButton)
                                .addGap(18, 18, 18)
                                .addComponent(showPastBookingsButton)
                                .addGap(18, 18, 18)
                                .addComponent(searchBox, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton)
                                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 8, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton)
                                        .addComponent(showBookingsButton)
                                        .addComponent(showFutureBookingsButton)
                                        .addComponent(showPastBookingsButton)
                                        .addComponent(currentBookingsButton))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spcBookingsScrollPane, GroupLayout.PREFERRED_SIZE, 393, GroupLayout.PREFERRED_SIZE))
        );

        pack();

        this.setMinimumSize(this.getSize());
        spcBookingTable.getColumnModel().getColumn(1).setMinWidth(0);
        spcBookingTable.getColumnModel().getColumn(1).setMaxWidth(0);
        spcBookingTable.getColumnModel().getColumn(1).setWidth(0);

        this.setLocationRelativeTo(null);
        addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                int height = getHeight();
                int width = getWidth();
                spcBookingsScrollPane.setSize(width, height - 63);
                spcBookingTable.setSize(width, height - 63);
                spcBookingsScrollPane.setLocation(0, 63);

                searchButton.setLocation(searchButton.getLocation().x, 28);
                showPastBookingsButton.setLocation(showPastBookingsButton.getLocation().x, 28);
                showFutureBookingsButton.setLocation(showFutureBookingsButton.getLocation().x, 28);
                showBookingsButton.setLocation(showBookingsButton.getLocation().x, 28);
                currentBookingsButton.setLocation(currentBookingsButton.getLocation().x, 28);
                searchBox.setLocation(searchBox.getLocation().x, 28);


            }
        });
    }// </editor-fold>                        

    private void addBookingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(null, "Please select a  Diagnostic&Repair booking to assign this booking to it ");
        ChooseBookingPrompt cbp = new ChooseBookingPrompt();
        cbp.show();
        if (cbp.isSuccessful()) {
            Booking booking = cbp.getSelectedBooking();
            AddSPCBookingPrompt prompt = new AddSPCBookingPrompt(booking);
            prompt.show();
            if (prompt.isSuccessful()) {
                try {
                    spcBookingTableModel.clearRows();
                    spcBookingTableModel.loadSPCBookings();
                    JOptionPane.showMessageDialog(null, "Booking has been successfully added");
                } catch (SQLException | ParseException ex) {
                    Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    private void deleteBookingMenuActionPerformed(java.awt.event.ActionEvent evt) {
        selectedRowIdx = spcBookingTable.getSelectedRow();
        if (selectedRowIdx == -1) {
            JOptionPane.showMessageDialog(null, "You need to select a booking (a row) in case to delete it.",
                    "GMSIS / Error Choosing SPC", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int spcBookingId = (int) spcBookingTable.getModel().getValueAt(selectedRowIdx, 0);

        // Ask to confirm action
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the SPC with id: '" + spcBookingId + "'",
                "Confirm deletion of spc", JOptionPane.YES_NO_OPTION)
                != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // Deleting spc booking from the database and table
            SPCBooking spcBooking = spcBookingTableModel.rowToSPCBooking(selectedRowIdx);
            Database.getInstance().deleteSPCBooking(spcBooking);
            spcBookingTableModel.removeRow(selectedRowIdx);
            Invoice invoice = spcBooking.getBooking().getInvoice();
            invoice.setSpcTotalCost(0);
            invoice.setSpcAmountDue(0);
            if (invoice.getBookingAmountDue() == invoice.getAmtPaid()) {
                invoice.setSettled(true); //change the invoice to settled if the only thing that is left to be paid for is the spcbooking (which is deleted)
                Database.getInstance().updateInvoice(invoice);
            }

            JOptionPane.showMessageDialog(this, "Successfully deleted SPC from the database.", "Delete SPC",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error deleting SPC from the database.\r\n"
                    + "Error Message: " + e.getMessage(), "Delete SPC // Database Error", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchSPCButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (searchBox.getText().isEmpty()||searchBox.getText()=="reg.num/cust.name") {
            JOptionPane.showMessageDialog(null, "Search box can not be blank");
        } else {
            try {
                Collection<SPCBooking> listOfBookings;
                listOfBookings = Database.getInstance().searchForSPCBooking(searchBox.getText());
                if (listOfBookings.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No bookings found satisfuing your searching criteria");
                } else {
                    JOptionPane.showMessageDialog(null, "Found " + listOfBookings.size() + " boooking(s) satisfying your criteria");
                    spcBookingTableModel.clearRows();
                    spcBookingTableModel.loadSPCBookings(listOfBookings);
                }
            } catch (SQLException | ParseException ex) {
                Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void showBookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            spcBookingTableModel.clearRows();
            spcBookingTableModel.loadSPCBookings();
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void pastBookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            spcBookingTableModel.clearRows();
            spcBookingTableModel.loadPastSPCBookings();
            if (spcBookingTable.getRowCount() == 0) {
                spcBookingTableModel.clearRows();
                spcBookingTableModel.loadSPCBookings();
                JOptionPane.showMessageDialog(null, "No past bookings found");
            }
            else
            JOptionPane.showMessageDialog(null,spcBookingTable.getRowCount()+ " past booking(s) found");
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void currentBookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            spcBookingTableModel.clearRows();
            spcBookingTableModel.loadCurrentSPCBookings();
            if (spcBookingTable.getRowCount() == 0) {
                spcBookingTableModel.clearRows();
                spcBookingTableModel.loadSPCBookings();
                JOptionPane.showMessageDialog(null, "No current bookings found");
            }
            else
                JOptionPane.showMessageDialog(null,spcBookingTable.getRowCount()+ " current booking(s) found");
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void futureBookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            spcBookingTableModel.clearRows();
            spcBookingTableModel.loadFutureSPCBookings();
            if (spcBookingTable.getRowCount() == 0) {
                spcBookingTableModel.clearRows();
                spcBookingTableModel.loadSPCBookings();
                JOptionPane.showMessageDialog(null, "No future bookings are found");
            }
            else
            JOptionPane.showMessageDialog(null,spcBookingTable.getRowCount()+ " future booking(s) found");
        } catch (SQLException | ParseException ex) {
            Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void spcPerVehicleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        ListOfSPCsPerVehicle lspc = new ListOfSPCsPerVehicle();
        lspc.setVisible(true);
        if (lspc.isSuc()) {
            try {
                spcBookingTableModel.clearRows();
                spcBookingTableModel.loadSPCBookings();
            } catch (SQLException | ParseException ex) {
                Logger.getLogger(ManageSPCBookingsDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    
    private void summaryMenuItemActionPerformed(ActionEvent evt) {
        OutstandingDialog dialog = new OutstandingDialog();
        dialog.setVisible(true);

    }

    private void listOfSPCsMenuItemActionPerformed(ActionEvent evt) {
        AllSPCsDialog allSPCs = new AllSPCsDialog();
        allSPCs.setVisible(true);
    }
     private void searchBoxMouseClicked(java.awt.event.MouseEvent evt) {
        searchBox.setText("");
    }
    
     private void returnedMenuItemActionPerformed(ActionEvent evt){
         ReturnedDialog rd = new ReturnedDialog();
         rd.setVisible(true);
     }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ignored) {
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManageSPCBookingsDialog dialog = new ManageSPCBookingsDialog(new JFrame(), true);
                dialog.setVisible(true);
            }
        });
    }

}
